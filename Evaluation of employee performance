#Библиотеки

import pandas as pd

import matplotlib.pyplot as plt

import numpy as np

from scipy import stats as st

import math

import seaborn as sns

import plotly.express as px

import plotly.graph_objects as go

from plotly.subplots import make_subplots

from datetime import date

import datetime as dt

import matplotlib.dates

 

import time

 

start = time.time()

 

#Загрузка файла

df=pd.read_excel('rus.xlsx', sheet_name = '(26-03)')

df_eng = pd.read_excel('eng.xlsx', sheet_name = '(26-03)')

 

#ИМПОРТ файла с правилами

df_rules = pd.read_excel('(правила).xlsx', sheet_name = ['Договоры', 'Отборы', 'Распоряжения'])

 

 

 

#Создание словарей

 

#Подразделения

dict = {

    'XXXXXXXXXXXXXX' : 'XX',

    'YYYYYY' : 'Y'
    
    }

 

#Люди

persons = {'MR XXXXX' : 'XX',

'MRS YXYX' : 'XY'

}

 

 

 

#Работа с английской выгрузкой

df_eng = pd.read_excel('eng.xlsx', sheet_name = '(26-03)')

 

eng_act = {

    'approved' : 'согласовано',

    'suspended' : 'приостановлено',

    'refused' : 'отказано'

}

df_eng['Action'] = df_eng['Action'].map(eng_act)

 

eng_doc = {

    'Selections / Contractor Selection' : 'Отборы / Отбор',

    'Contracts / Contract' : 'Договоры / Договор' ,

    'Miscellaneous Documents' : 'Распорядительные / Распоряжение'

}

df_eng['Category'] = df_eng['Category'].map(eng_doc)

 

eng_per = {'XYX' : 'XY'}

df_eng['Representative'] = df_eng['Representative'].map(eng_per)

 

#Объединение таблиц

column_mapping = {

    '#' : '№ п/п',

    'Name server' : 'Имя сервера',

    'Reg. number' : 'Рег. номер',

    'Reg. date' : 'Рег. дата',

    'Creation date' : 'Дата создания документа',

    'Action date' : 'Дата соверш. действия',

    'Action time' : 'Время соверш. действия',

    'Action' : 'Действие',

    'Header/name' : 'Заголовок/наименование',

    'Counterparties' : 'Контрагенты',

    'Business unit' : 'Орг.единица',

    'Category' : 'Категория',

    'Type of document' : 'Вид документа',

    'Author' : 'Автор',

    'Author subdivision' : 'Подразделение автора',

    'Representative' : 'Представитель',

    'Comments' : 'Комментарий',

    'Received date' : 'Поступил дата',

    'Received time' : 'Поступил время',

    'Duration of action, calendar hours' : 'Длит-ть действия, в календ. часах',

    'Duration of action, work hours' : 'Длит-ть действия, в рабоч. часах',

    'Approver' : 'Согласующий'

}

df_eng.rename(columns = column_mapping, inplace = True)

 

#Делаем данные красивыми

df['Контрагенты'] = df['Контрагенты'].replace('-', 'Нет данных')

df_final = pd.concat([df, df_eng], ignore_index=True)

df_final['Подразделение автора'] = df_final['Подразделение автора'].map(dict)

df_final['Представитель'] = df_final['Представитель'].map(persons)

df_final= df_final.replace('-', None)

df_final= df_final.dropna(axis = 0, how ='any')

df_final['Длит-ть действия, в рабоч. часах'].astype(str).astype(float)

df_final['Дата соверш. действия']= pd.to_datetime(df_final['Дата соверш. действия'], errors='coerce')

df_final['Поступил дата']= pd.to_datetime(df_final['Поступил дата'], errors='coerce')

 

 

#Считаем просрочки

key_dates = {sheet: rules.at[0, 'Дата'] for sheet, rules in df_rules.items()}

overdue_hours = {sheet: rules.at[0, 'Количество часов'] for sheet, rules in df_rules.items()}

 

def check_overdue(row):

    if row['Категория'] == 'Договоры / Договор' and row['Поступил дата']>= key_dates['Договоры']:

        if row['Длит-ть действия, в рабоч. часах'] > overdue_hours['Договоры']:

            return 'Просрочка'

        else:

            return 'В рамках регламента'

    elif row['Поступил дата'] < key_dates['Договоры']:

            return 'Обнови Данные Даты / Старое условие - смотри старую выгрузку'

    if row['Категория'] == 'Отборы / Отбор' and row['Поступил дата']>= key_dates['Отборы']:

        if row['Длит-ть действия, в рабоч. часах'] > overdue_hours['Отборы']:

            return 'Просрочка'

        else:

            return 'В рамках регламента'

    elif row['Поступил дата'] < key_dates['Отборы']:

            return 'Обнови Данные Даты / Старое условие - смотри старую выгрузку'

    if row['Категория'] == 'Распорядительные / Распоряжение' and row['Поступил дата']>= key_dates['Распоряжения']:

        if row['Длит-ть действия, в рабоч. часах'] > overdue_hours['Распоряжения']:

            return 'Просрочка'

        else:

            return 'В рамках регламента'

    elif row['Поступил дата'] < key_dates['Распоряжения']:

            return 'Обнови Данные Даты / Старое условие - смотри старую выгрузку'

    else:

        return ''

 

df_final['Статус'] = df_final.apply(check_overdue, axis = 1)

 

 

#Выгрузка общего массива в эксель

df_final.to_excel('ОБЪЕДИНЕННАЯ ВЫГРУЗКА.xlsx', index = False)

 

#Создание общего файла с расчётами

category = df_final.groupby(['Дата соверш. действия', 'Категория', 'Действие']).size().unstack()

agent = df_final.groupby(['Дата соверш. действия', 'Представитель']).size().unstack(fill_value = 0)

place = df_final.groupby(['Дата соверш. действия', 'Подразделение автора', 'Категория']).size().unstack()

#geom = df_final.groupby(['Дата соверш. действия' , 'Категория'])['Длит-ть действия, в рабоч. часах'].apply(lambda x: x.prod()**(1/len(x)))

 

filtered_0 = df_final[(df_final['Длит-ть действия, в рабоч. часах']==0)]

filtered_1 = df_final[(df_final['Длит-ть действия, в рабоч. часах']>0)&(df_final['Длит-ть действия, в рабоч. часах']<16)]

filtered_2 = df_final[(df_final['Длит-ть действия, в рабоч. часах']>16)]

 

avg_time_0 = filtered_0.groupby(['Дата соверш. действия' , 'Категория'])['Длит-ть действия, в рабоч. часах'].count().unstack()

avg_time_1 = filtered_1.groupby(['Дата соверш. действия' , 'Категория'])['Длит-ть действия, в рабоч. часах'].mean().unstack()

avg_time_2 = filtered_2.groupby(['Дата соверш. действия' , 'Категория'])['Длит-ть действия, в рабоч. часах'].mean().unstack()

 

avg_time_2.columns = ['Штрафное время ' + str(col) for col in avg_time_2.columns]

avg_time_0.columns = ['Быстрые ' + str(col) for col in avg_time_0.columns]

 

time_df = pd.concat([avg_time_0, avg_time_1, avg_time_2], axis = 1)

2

#Выгрузка в Эксель расчетов

output_file = 'РЕЗУЛЬТАТ.xlsx'

category.to_excel(output_file, sheet_name = 'Количество по категориям')

with pd.ExcelWriter(output_file, mode = 'a') as writer:

    agent.to_excel(writer, sheet_name = 'Представители')

    place.to_excel(writer, sheet_name = 'Подразделения')

    #geom.to_excel(writer, sheet_name = 'Среднее время работы')

    time_df.to_excel(writer, sheet_name = 'Среднее время работы')

 

print ('создан файл - ' + str(time.time() - start))
